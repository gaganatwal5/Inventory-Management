package Project;

import java.awt.Color;
import java.awt.event.KeyEvent;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.IOException; 
import java.io.PrintWriter;
import java.util.ArrayList;
import java.util.Calendar;
import java.util.Iterator;
import java.util.Scanner;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.BorderFactory;
import javax.swing.JOptionPane;
import javax.swing.JSpinner;
import javax.swing.SpinnerModel;
import javax.swing.SpinnerNumberModel;
import javax.swing.event.DocumentEvent;
import javax.swing.event.DocumentListener;
import javax.swing.table.DefaultTableModel;
import javax.swing.text.Document;


public class CDInventory extends javax.swing.JFrame {

    /**
     * Creates new form CdInventoryInventory
     */
    //intially arralistt and file is created to store the data
    ArrayList<Cd> cd = new ArrayList<>();
    File fileDescriptor = new File("../Project\\src\\Project\\collection");
    Cd cdName = null;
    Cd cdForEdit;
    int index = 0; //index count is set as 0 

    public CDInventory() {

        initComponents();
       /*This method set  buttons or fields to enable or
        disable mode state when program start.*/
        firstClicks(); 

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jScrollPane2 = new javax.swing.JScrollPane();
        jList1 = new javax.swing.JList();
        jToggleButton1 = new javax.swing.JToggleButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();
        jTextField4 = new javax.swing.JTextField();
        jButton3 = new javax.swing.JButton();
        jLabel9 = new javax.swing.JLabel();
        jLabel8 = new javax.swing.JLabel();
        jScrollPane3 = new javax.swing.JScrollPane();
        jTextPane1 = new javax.swing.JTextPane();
        jComboBox2 = new javax.swing.JComboBox();
        jDialog1 = new javax.swing.JDialog();
        jLabel7 = new javax.swing.JLabel();
        jPanel1 = new javax.swing.JPanel();
        jScrollPane4 = new javax.swing.JScrollPane();
        table = new javax.swing.JTable();
        jLabel10 = new javax.swing.JLabel();
        jLabel11 = new javax.swing.JLabel();
        searchField = new javax.swing.JTextField();
        list = new javax.swing.JComboBox();
        jPanel2 = new javax.swing.JPanel();
        exit = new javax.swing.JButton();
        search = new javax.swing.JButton();
        year = new javax.swing.JSpinner();
        edit = new javax.swing.JButton();
        jLabel5 = new javax.swing.JLabel();
        name = new javax.swing.JTextField();
        next = new javax.swing.JButton();
        type = new javax.swing.JComboBox();
        first = new javax.swing.JButton();
        save = new javax.swing.JButton();
        previous = new javax.swing.JButton();
        price = new javax.swing.JTextField();
        jLabel12 = new javax.swing.JLabel();
        delete = new javax.swing.JButton();
        last = new javax.swing.JButton();
        jLabel6 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        record = new javax.swing.JButton();
        director = new javax.swing.JTextField();

        jList1.setModel(new javax.swing.AbstractListModel() {
            String[] strings = { "Item 1", "Item 2", "Item 3", "Item 4", "Item 5" };
            public int getSize() { return strings.length; }
            public Object getElementAt(int i) { return strings[i]; }
        });
        jScrollPane2.setViewportView(jList1);

        jToggleButton1.setText("jToggleButton1");
        jToggleButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jToggleButton1ActionPerformed(evt);
            }
        });

        jTable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jScrollPane1.setViewportView(jTable1);

        jTextField4.setText("jTextField4");
        jTextField4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jTextField4ActionPerformed(evt);
            }
        });

        jButton3.setText("jButton3");

        jLabel9.setText("Search Movie by Name");

        jLabel8.setText(" Movies List");

        jScrollPane3.setViewportView(jTextPane1);

        jComboBox2.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));

        javax.swing.GroupLayout jDialog1Layout = new javax.swing.GroupLayout(jDialog1.getContentPane());
        jDialog1.getContentPane().setLayout(jDialog1Layout);
        jDialog1Layout.setHorizontalGroup(
            jDialog1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 400, Short.MAX_VALUE)
        );
        jDialog1Layout.setVerticalGroup(
            jDialog1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 300, Short.MAX_VALUE)
        );

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Project");
        setPreferredSize(new java.awt.Dimension(1130, 530));

        jLabel7.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jLabel7.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel7.setText("MUSIC COLLECTION OR INVENTORY");
        jLabel7.setFont(new java.awt.Font("Tahoma", 1, 20)); // NOI18N

        jLabel7.setForeground(new java.awt.Color(102, 102, 102));
        jLabel7.setBorder(BorderFactory.createLineBorder(Color.white));

        table.setFont(new java.awt.Font("sansserif", 4, 18)); // NOI18N
        table.setBorder(BorderFactory.createLineBorder(Color.black));
        table.setForeground(new java.awt.Color(0, 0, 0));
        table.setRowHeight(40);
        table.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null}
            },
            new String [] {
                " CD", "      Detail"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        table.setRowHeight(40);
        jScrollPane4.setViewportView(table);

        jLabel10.setText("Search By CD Name :");
        jLabel10.setFont(new java.awt.Font("Tahoma", 1, 14)); jLabel10.setForeground(new java.awt.Color(102, 102, 102));

        jLabel11.setText("All CD List :");
        jLabel11.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N

        jLabel11.setForeground(new java.awt.Color(102, 102, 102));

        searchField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                searchFiieldActionPerformed(evt);
            }
        });

        list.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));
        list.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                MoviesListActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(10, 10, 10)
                        .addComponent(jLabel10, javax.swing.GroupLayout.PREFERRED_SIZE, 180, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(10, 10, 10)
                        .addComponent(searchField, javax.swing.GroupLayout.PREFERRED_SIZE, 300, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(60, 60, 60)
                        .addComponent(jLabel11, javax.swing.GroupLayout.PREFERRED_SIZE, 140, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 0, 0)
                        .addComponent(list, javax.swing.GroupLayout.PREFERRED_SIZE, 300, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(jScrollPane4, javax.swing.GroupLayout.PREFERRED_SIZE, 500, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(30, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel10, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(searchField, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(10, 10, 10)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel11, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(list, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 25, Short.MAX_VALUE)
                .addComponent(jScrollPane4, javax.swing.GroupLayout.PREFERRED_SIZE, 268, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(20, 20, 20))
        );

        exit.setText("Exit");
        exit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                exitActionPerformed(evt);
            }
        });

        search.setText("Search");
        search.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                searchButtonActionPerformed(evt);
            }
        });

        Calendar calendar = Calendar.getInstance();
        int currentYear = calendar.get(Calendar.YEAR);
        SpinnerModel yearModel = new SpinnerNumberModel(currentYear, //initial value
            currentYear - 100, //min
            currentYear + 100, //max
            1);                //step

        year = new javax.swing.JSpinner(yearModel);
        year.setEditor(new JSpinner.NumberEditor(year, "#"));

        edit.setText("Edit");
        edit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                editButtonActionPerformed(evt);
            }
        });

        jLabel5.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        jLabel5.setText("Year  : ");

        name.setText("gvcdhc");
        name.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                nameFiledActionPerformed(evt);
            }
        });

        next.setText("Next");
        next.setToolTipText("");
        next.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                nextButtonActionPerformed(evt);
            }
        });

        type.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Romantic", "Pop", "Folk Rock", "Hard Rock","Disco","Dance","Rock","Country Rock" }));
        type.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                movieTypeActionPerformed(evt);
            }
        });

        first.setText("First");
        first.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                firstButtonActionPerformed(evt);
            }
        });

        save.setText("Save");
        save.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                saveButtonActionPerformed(evt);
            }
        });

        previous.setText("Previous");
        previous.setToolTipText("");
        previous.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                previousButtonActionPerformed(evt);
            }
        });

        price.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                priceActionPerformed(evt);
            }
        });
        price.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                priceKeyTyped(evt);
            }
        });

        jLabel12.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        jLabel12.setText("Price :");

        delete.setText("Delete");
        delete.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                deleteButtonActionPerformed(evt);
            }
        });

        last.setText("Last");
        last.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                LastButtonActionPerformed(evt);
            }
        });

        jLabel6.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        jLabel6.setText("Music type :");

        jLabel4.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        jLabel4.setText(" Director Name :  ");
        // NOI18N

        jLabel3.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        jLabel3.setText("CD Name : ");
        jLabel10.setFont(new java.awt.Font("Tahoma", 1, 14)); jLabel10.setForeground(new java.awt.Color(102, 102, 102));

        record.setText("Add Cd");
        record.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addButtonActionPerformed(evt);
            }
        });

        director.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                directorNameFieldActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel5, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel4, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                        .addComponent(jLabel6, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(jLabel12, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                .addGroup(jPanel2Layout.createSequentialGroup()
                                    .addComponent(first, javax.swing.GroupLayout.PREFERRED_SIZE, 110, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(last, javax.swing.GroupLayout.PREFERRED_SIZE, 120, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                                    .addComponent(previous, javax.swing.GroupLayout.PREFERRED_SIZE, 110, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addGap(20, 20, 20)
                                    .addComponent(next, javax.swing.GroupLayout.PREFERRED_SIZE, 120, javax.swing.GroupLayout.PREFERRED_SIZE)))
                            .addGroup(jPanel2Layout.createSequentialGroup()
                                .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(0, 0, 0)
                                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(name, javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(year, javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(type, javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(price, javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(director, javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE))))
                        .addGap(42, 42, 42)
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(record, javax.swing.GroupLayout.PREFERRED_SIZE, 130, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(edit, javax.swing.GroupLayout.PREFERRED_SIZE, 130, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(delete, javax.swing.GroupLayout.PREFERRED_SIZE, 130, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(search, javax.swing.GroupLayout.PREFERRED_SIZE, 130, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(save, javax.swing.GroupLayout.PREFERRED_SIZE, 130, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(exit, javax.swing.GroupLayout.PREFERRED_SIZE, 130, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addContainerGap(34, Short.MAX_VALUE))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addGroup(jPanel2Layout.createSequentialGroup()
                                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(jPanel2Layout.createSequentialGroup()
                                        .addComponent(name, javax.swing.GroupLayout.PREFERRED_SIZE, 33, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addGap(16, 16, 16)
                                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                            .addComponent(director, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addComponent(jLabel4, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE))
                                        .addGap(19, 19, 19)
                                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                            .addComponent(year, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addComponent(jLabel5, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)))
                                    .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGap(10, 10, 10)
                                .addComponent(type, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addComponent(jLabel6, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel2Layout.createSequentialGroup()
                                .addGap(10, 10, 10)
                                .addComponent(price, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(jPanel2Layout.createSequentialGroup()
                                .addGap(18, 18, 18)
                                .addComponent(jLabel12, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(previous, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(next, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(jPanel2Layout.createSequentialGroup()
                                .addGap(70, 70, 70)
                                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(last, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(first, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)))))
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addComponent(record, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(12, 12, 12)
                        .addComponent(edit, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(delete, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(10, 10, 10)
                        .addComponent(search, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(10, 10, 10)
                        .addComponent(save, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(exit, javax.swing.GroupLayout.PREFERRED_SIZE, 52, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap())
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(69, 69, 69)
                .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(44, Short.MAX_VALUE))
            .addComponent(jLabel7, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jLabel7, javax.swing.GroupLayout.PREFERRED_SIZE, 51, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(29, 29, 29)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(45, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void nameFiledActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_nameFiledActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_nameFiledActionPerformed

    private void jToggleButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jToggleButton1ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jToggleButton1ActionPerformed

    @SuppressWarnings("empty-statement")
    private void previousButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_previousButtonActionPerformed

        try {
            // this  button is used to navigate the cd list backward
            showResult();
            Cd currCd = cd.get(--index);
            showResult(currCd);

        } catch (IndexOutOfBoundsException ex) {
            System.out.println("problem in fetching previous cd");
        }
    }//GEN-LAST:event_previousButtonActionPerformed

    @SuppressWarnings({"empty-statement", "empty-statement"})
    private void nextButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_nextButtonActionPerformed

        // this  button is used to navigate the cd list Forward
        try {
            showResult();
            Cd currCd = cd.get(++index);

            showResult(currCd);

        } catch (IndexOutOfBoundsException ex) {

            System.out.println("problem in fetching next cd");
        }

// TODO add your handling code here:
    }//GEN-LAST:event_nextButtonActionPerformed

    private void jTextField4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jTextField4ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jTextField4ActionPerformed

    private void addButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addButtonActionPerformed
        // set name  year, director name field empty
        try {
//add button enable user to add new cds
            //  it set all field or buttons as per their configuration.
            clearFields();
            cdName = null;
            name.setEditable(true);
            director.setEditable(true);
            type.setEnabled(true);
            price.setEditable(true);
            year.setEnabled(true);
            save.setEnabled(true);

            //      showResult();
        } catch (NumberFormatException | NullPointerException ex) {
            System.out.println("Already Cleared");

        }

// TODO add your handling code here:
    }//GEN-LAST:event_addButtonActionPerformed

    private void firstButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_firstButtonActionPerformed

        //this  button show first cd in list
        try {
            showResult();
            index = 0;

            Cd currElement = cd.get(index);

            showResult(currElement);

        } catch (NumberFormatException | NullPointerException ex) {
            System.out.println("cd list has not any cd");

        }


    }//GEN-LAST:event_firstButtonActionPerformed

    private void LastButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_LastButtonActionPerformed

        //this button fetch last cd from the cd list
        try {
            showResult();

            next.setEnabled(false);
            previous.setEnabled(true);
            Cd currElement = cd.get(cd.size() - 1);

            showResult(currElement);
        } catch (NumberFormatException | NullPointerException ex) {
            System.out.println("cd list has not any cd");

        }
    }//GEN-LAST:event_LastButtonActionPerformed

    private void editButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_editButtonActionPerformed

        //this button enable the user to edit any cd 
        //information from file and cd list
        //and enable those  button or fileds which are required to do this.
        try {
            if (cdForEdit != null) {
                save.setEnabled(true);
                name.setEditable(true);
                director.setEditable(true);
                type.setEnabled(true);
                price.setEditable(true);
                year.setEnabled(true);
                save.setEnabled(true);
            }
            name.setText(cdForEdit.getName());
            director.setText(cdForEdit.getDirector());
            //   String value=year.setValue(cdName.getYear());
            int yearSet = cdForEdit.getYear();

            year.setValue(yearSet);
            type.setSelectedItem(cdForEdit.getType());
            Double pric = cdForEdit.getPrice();
            price.setText(Double.toString(pric));

        } catch (NumberFormatException | NullPointerException ex) {
            System.out.println("Find Some Text to edit");

        }
    }//GEN-LAST:event_editButtonActionPerformed

    private void deleteButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_deleteButtonActionPerformed

        //button button will delete any selected cd from cd list 
        //  and set the values of  that cd list to null.
        if (cd.isEmpty()) {
            System.out.println("no cd Found");
        } else {
            Iterator<Cd> it = cd.iterator();
            try {
                Cd currCd;
                while (it.hasNext()) {
                    Cd user = it.next();
                    if (cdName.getId() == (user.getId())) {
                        it.remove();
                        saveToFile();
                        loadList();

                        clearFields();

                        searchField.setText("");
                        if (cd.isEmpty() == false) {
                            currCd = cd.get(index);
                            showResult(currCd);
                        } else {
                            showResult();
                        }

                        break;

                    } else {
                    }

                }
                if (cd.isEmpty() == true) {
                    last.setEnabled(false);
                    first.setEnabled(false);
                }

            } catch (FileNotFoundException ex) {
            Logger.getLogger(CDInventory.class.getName()).
                    log(Level.SEVERE, null, ex);

                System.out.println("fie not found");

            } catch (NullPointerException | NumberFormatException e) {
                JOptionPane.showMessageDialog
                        (null, "please select cd to delete.");
            } catch (IOException ex) {
                Logger.getLogger(CDInventory.class.getName()).
                        log(Level.SEVERE, null, ex);
            }
        }


    }//GEN-LAST:event_deleteButtonActionPerformed

    @SuppressWarnings("empty-statement")
    private void searchButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_searchButtonActionPerformed

        // button used to  find the cd  from large movie 
        //        list and show it in the table 
        try {
            showResult();
            if (cd.isEmpty() != true) {

                String id;

                Scanner scanner = null;

                scanner = new Scanner(fileDescriptor);

                while (scanner.hasNext()) {
                    id = scanner.nextLine();
                    // line = scanner.nextLine();
                    Cd searchedCd = splitString(id);
                    if (searchField.getText().
                            equalsIgnoreCase(searchedCd.getName())) {
                        showResult(searchedCd);
                        break;
                    }
                    if (!scanner.hasNext()) {
                        JOptionPane.showMessageDialog
                                (null, "No cd Found With This Name");
                    }
                }
            } else {
                JOptionPane.showMessageDialog(null, "cd list is Empty");
            }
        } catch (FileNotFoundException ex) {
            Logger.getLogger(CDInventory.class.getName()).
                    log(Level.SEVERE, null, ex);
            System.out.print("File failure");
        } catch (NumberFormatException e) {
            System.out.print("problem in searching cd");
        } catch (NullPointerException e) {
            JOptionPane.showMessageDialog(null, "please type some value");
        }


    }//GEN-LAST:event_searchButtonActionPerformed

    private void saveButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_saveButtonActionPerformed
// fetch all text values fron text fields

        // button used to save the new or edited movies  and fetching 
//        all  value values from  gui. checking all condition

        try {
            if ((name.getText().equals("") || (price.equals("0.00")))
                    || price == null) {
                JOptionPane.showMessageDialog(null, 
                        "Please enter name and Price  values");
            }

            Cd cdDetail = null;
            String movieName;
            movieName = name.getText();
            while (movieName.equalsIgnoreCase("")) {
                String repeatedName = JOptionPane.showInputDialog
                        (null, "Please Enter Cd Name");
                name.setText(repeatedName);
                movieName = repeatedName;
            }
            String directorName = director.getText();
            if (directorName.equals("")) {
                directorName = "Not Entered";
            }
            
            int value = (int) year.getValue();

            String cdType = (String) type.getSelectedItem();

            String cdPrice = price.getText();

            double parsedPrice = Double.parseDouble(cdPrice);

            if (cdName != null) {
                if (cdName.getId() != 0) {
                    replaceText(movieName, directorName, cdType, value, parsedPrice);

                }
            } else {
                cdDetail = new Cd((int) (Math.random() * 1000), 
                  movieName, directorName, cdType, value, parsedPrice);
                cd.add(cdDetail);
            }

            cdName = cdDetail;

            saveToFile();
            loadList();
            showResult(cdName);;
            clearFields();
        } catch (FileNotFoundException ex) {
            Logger.getLogger(CDInventory.class.getName()).
                    log(Level.SEVERE, null, ex);
        } catch (NullPointerException | NumberFormatException e) {
            System.out.print("Please enter all values");
        } catch (IOException ex) {
            Logger.getLogger(CDInventory.class.getName()).
                    log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_saveButtonActionPerformed

    private void directorNameFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_directorNameFieldActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_directorNameFieldActionPerformed

    private void searchFiieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_searchFiieldActionPerformed
        // TODO add your handling code here:
        search.setEnabled(true);

    }//GEN-LAST:event_searchFiieldActionPerformed

    private void MoviesListActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_MoviesListActionPerformed

        //  .. this combobox is used to selecting the movie from list
        showResult();
        int mov = list.getSelectedIndex();
        if (mov != -1) {
            Cd selectedMovie = cd.get(mov);
            showResult(selectedMovie);
        }
    }//GEN-LAST:event_MoviesListActionPerformed

    private void movieTypeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_movieTypeActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_movieTypeActionPerformed

    private void priceActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_priceActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_priceActionPerformed

    private void exitActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_exitActionPerformed

        //method used to exit  the program.
        int exit1 = JOptionPane.showConfirmDialog(null,
                "Are you sure you want to quit?", "Exit",
                JOptionPane.YES_NO_OPTION, JOptionPane.QUESTION_MESSAGE);
        if (exit1 == JOptionPane.YES_OPTION) {
            this.dispose();
            System.exit(0);
        }


    }//GEN-LAST:event_exitActionPerformed

    private void priceKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_priceKeyTyped
        char c = evt.getKeyChar();
        if (!(Character.isDigit(c))) {

            evt.consume();
            JOptionPane.showMessageDialog(null, "Price must be a number");
        }
    }//GEN-LAST:event_priceKeyTyped

    /**
     * @param args the command line arguments
     */
    //program starts from here ,its the main method to start the program.
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(CDInventory.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(CDInventory.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(CDInventory.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(CDInventory.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            @Override
            public void run() {

                CDInventory loadMovie = new CDInventory();
                loadMovie.load();

                loadMovie.setVisible(true);
            }
        });
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton delete;
    private javax.swing.JTextField director;
    private javax.swing.JButton edit;
    private javax.swing.JButton exit;
    private javax.swing.JButton first;
    private javax.swing.JButton jButton3;
    private javax.swing.JComboBox jComboBox2;
    private javax.swing.JDialog jDialog1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JList jList1;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JScrollPane jScrollPane4;
    private javax.swing.JTable jTable1;
    private javax.swing.JTextField jTextField4;
    private javax.swing.JTextPane jTextPane1;
    private javax.swing.JToggleButton jToggleButton1;
    private javax.swing.JButton last;
    private javax.swing.JComboBox list;
    private javax.swing.JTextField name;
    private javax.swing.JButton next;
    private javax.swing.JButton previous;
    private javax.swing.JTextField price;
    private javax.swing.JButton record;
    private javax.swing.JButton save;
    private javax.swing.JButton search;
    private javax.swing.JTextField searchField;
    private javax.swing.JTable table;
    public javax.swing.JComboBox type;
    public transient javax.swing.JSpinner year;
    // End of variables declaration//GEN-END:variables

    private void saveToFile() throws FileNotFoundException, IOException {

        /// new or edited movie is save or replaced through this 
//        method using print writer.
        try (PrintWriter writer = new PrintWriter(fileDescriptor)) {

            for (Cd saveCD : cd) {

                writer.println(saveCD.getId() + "," + saveCD.getName() 
                  + "," + saveCD.getDirector() + "," + saveCD.getType() 
                  + "," + saveCD.getYear() + "," + saveCD.getPrice());

            }
            JOptionPane.showMessageDialog(null, "Data Updated");
        } catch (FileNotFoundException ex) {
            Logger.getLogger(CDInventory.class.getName()).log
                    (Level.SEVERE, null, ex);
            System.out.print("File failure");
        } catch (NullPointerException | NumberFormatException e) {
            System.out.print("some problem occur in  saving file");
        }
        // year.setText("");
    }

    private void load() {

        // this method load the value from file to array 
//        list to show it in program again
        Scanner scanner;
        try {
            scanner = new Scanner(fileDescriptor);
            while (scanner.hasNext()) {
                Cd cdLoad = new Cd();
                cd.add(cdLoad.load(scanner));
            }

            loadList(); //call for making cdlist combobox to view all movies
            System.out.println("ok");
        } catch (FileNotFoundException ex) {
            System.out.println("unable to load cd from file");
        }
    }

    private Cd splitString(String id) {

//this method makes an object of aall cd to  store it in arraylist  from file
        String[] splits = id.split("\\,");
        String randomId = splits[0];
        int random = Integer.parseInt(randomId);
        String name1 = splits[1];
        String name2 = splits[2];
        String type1 = splits[3];
        String year1 = splits[4];
        int changedYear = Integer.parseInt(year1);
        String doublePrice = splits[5];
        double convertedValue = Double.parseDouble(doublePrice);
        Cd showCD = new Cd(random, name1, name2, type1, 
                changedYear, convertedValue);
        return showCD;
    }

    private void showResult(Cd cds) {

        // it display table on screan for all movie 
        //,by showing eachmovie detail
        cdForEdit = cds;
        checkButtonValue(cds);
        name.setEditable(false);
        director.setEditable(false);
        type.setEnabled(false);
        price.setEditable(false);

        DefaultTableModel model = (DefaultTableModel) table.getModel();
        cdName = cds;
        model.insertRow(0, new Object[]{"Cd Name :", cds.getName()});
        model.insertRow(1, new Object[]{"Director Name :", cds.getDirector()});
        model.insertRow(2, new Object[]{"Year Released :", cds.getYear()});
        model.insertRow(3, new Object[]{"Cd Type :", cds.getType()});
        model.insertRow(4, new Object[]{"Price :", "$" + cds.getPrice()});
        model.insertRow(4, new Object[]{"CD ID :", cds.getId()});
        save.setEnabled(false);
        list.setSelectedIndex(index);
    }

    private void showResult() {
        // all rows are deleted from table for viewing other movie in table
        DefaultTableModel tab = (DefaultTableModel) table.getModel();
        int i = tab.getRowCount() - 1;

        while (i >= 0) {
            tab.removeRow(i);
            i--;
        }

    }

    private void replaceText(String movieName, String directorName,
            String type, int value, double cdPrice) throws IOException {

        //this method is used to edit the movie in file and arraylist 
//        by fetching values from textfields and comparing this 
//        field with file movies
        String id, line;
        Scanner scanner = null;
        scanner = new Scanner(fileDescriptor);
        cd.clear();
        while (scanner.hasNext()) {
            id = scanner.nextLine();

            Cd showCD = splitString(id);
            if (cdName.getId() == showCD.getId()) {
                showCD.setName(movieName);
                showCD.setDirector(directorName);
                showCD.setYear(value);
                showCD.setPrice(cdPrice);
                showCD.setType(type);
                cdName = showCD;

            }
            cd.add(showCD);

        }
    }

    @SuppressWarnings("empty-statement")
    private void checkButtonValue(Cd movi) {

        // tis method set the button state on or off, in between the program.
        int id = movi.getId();

        for (int i = 0; i < cd.size(); i++) {

            Cd nextCd = cd.get(i);
            if (id == nextCd.getId()) {
                if (cd.size() == 1) {
                    next.setEnabled(false);
                    previous.setEnabled(false);
                }

                if (i != cd.size() - 1 && i != 0) {
                    next.setEnabled(true);
                    previous.setEnabled(true);
                    first.setEnabled(true);
                    last.setEnabled(true);
                }
                if (i == cd.size() - 1) {
                    next.setEnabled(false);
                    previous.setEnabled(true);
                }
                if (i == 0) {

                    previous.setEnabled(false);
                    next.setEnabled(true);

                }
                if (i == 0 && cd.size() == 1) {
                    next.setEnabled(false);
                    previous.setEnabled(false);
                    first.setEnabled(true);
                    last.setEnabled(true);
                }

                index = i;

            }

        }

    }

    private void firstClicks() {

        //intaially  button or textfields configuration is set .
        name.setEditable(false);
        director.setEditable(false);
        type.setEnabled(false);
        price.setEditable(false);

        save.setEnabled(false);
        search.setEnabled(false);
        if (true == cd.isEmpty()) {
            next.setEnabled(false);
            previous.setEnabled(false);

        } else {
            first.setEnabled(true);
            last.setEnabled(true);

        }

        //use for enabling search button by detecting  text from search field.
        Document doc = searchField.getDocument();
        doc.addDocumentListener(new DocumentListener() {
            @Override
            public void insertUpdate(DocumentEvent e) {
                search.setEnabled(true);

            }

            @Override
            public void removeUpdate(DocumentEvent e) {
                String num = searchField.getText();
                if (num.length() == 0) {
                    search.setEnabled(false);
                }
            }

            @Override
            public void changedUpdate(DocumentEvent e) {
            }
        });
    }

    private void clearFields() {
        //methoded used to clear all texfields.
        save.setEnabled(false);
        name.setText("");
        director.setText("");
//        year.setText("");
        searchField.setText("");
        name.requestFocus();
        price.setText("");
        type.setSelectedIndex(0);
        //step

    }

    private void loadList() {
        //    mehod is used to load cdlist combobox f 
       //     after adding or deleting elemnt in combobox.

        list.removeAllItems();

        for (Cd showName : cd) {
            list.addItem(showName.getName());
        }
        if (!cd.isEmpty()) {
            list.setSelectedIndex(index);
        }
    }
}
